{"docstore/metadata": {"c1953432-23f4-42ec-b471-43dcd50dee73": {"doc_hash": "c0a51aedc9e10fd9dc8b4f8f9651cfc5b92e51526ee8bca4aa439d99628fbd01"}, "c4a18043-d920-4a37-a62a-b77f3012f9ea": {"doc_hash": "c4bb83dc9afc844568336f4e998c3434bb164c344017059490e03f78e9f74dc7", "ref_doc_id": "c1953432-23f4-42ec-b471-43dcd50dee73"}}, "docstore/ref_doc_info": {"c1953432-23f4-42ec-b471-43dcd50dee73": {"node_ids": ["c4a18043-d920-4a37-a62a-b77f3012f9ea"], "metadata": {"file_path": "D:\\Coding\\Python Projects\\AgenticAI\\data\\fsd\\fsd.txt", "file_name": "fsd.txt", "file_type": "text/plain", "file_size": 3153, "creation_date": "2025-07-09", "last_modified_date": "2025-07-09"}}}, "docstore/data": {"c4a18043-d920-4a37-a62a-b77f3012f9ea": {"__data__": {"id_": "c4a18043-d920-4a37-a62a-b77f3012f9ea", "embedding": null, "metadata": {"file_path": "D:\\Coding\\Python Projects\\AgenticAI\\data\\fsd\\fsd.txt", "file_name": "fsd.txt", "file_type": "text/plain", "file_size": 3153, "creation_date": "2025-07-09", "last_modified_date": "2025-07-09"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c1953432-23f4-42ec-b471-43dcd50dee73", "node_type": "4", "metadata": {"file_path": "D:\\Coding\\Python Projects\\AgenticAI\\data\\fsd\\fsd.txt", "file_name": "fsd.txt", "file_type": "text/plain", "file_size": 3153, "creation_date": "2025-07-09", "last_modified_date": "2025-07-09"}, "hash": "c0a51aedc9e10fd9dc8b4f8f9651cfc5b92e51526ee8bca4aa439d99628fbd01", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "FSD: Blogging Platform REST API\r\n1. Overview\r\nPurpose: Provide a backend for a blogging platform allowing users to register, write posts, comment, and moderate content.\r\nActors:\r\n\r\nPublic Visitor\r\n\r\nRegistered User\r\n\r\nAdmin\r\n\r\n2. Modules & Endpoints\r\n2.1 Authentication\r\nPOST /auth/register\r\n\r\nInput: { username: string, email: string, password: string }\r\n\r\nOutput: { userId: uuid, token: string }\r\n\r\nErrors: 400 on invalid email/password, 409 if email exists\r\n\r\nPOST /auth/login\r\n\r\nInput: { email: string, password: string }\r\n\r\nOutput: { token: string }\r\n\r\nErrors: 401 on invalid credentials\r\n\r\n2.2 Users\r\nGET /users/{id} \u2013 returns { id, username, email, bio }\r\n\r\nPUT /users/{id} \u2013 update profile, requires JWT, only by same user\r\n\r\nDELETE /users/{id} \u2013 requires Admin\r\n\r\n2.3 Posts\r\nPOST /posts/ \u2013 create a post (title, body, optional tags), authenticated\r\n\r\nGET /posts/ \u2013 list all posts with id, title, summary, authorId, tags, createdAt\r\n\r\nGET /posts/{id} \u2013 full post detail plus comments\r\n\r\nPUT /posts/{id} \u2013 edit post (author only)\r\n\r\nDELETE /posts/{id} \u2013 author or admin\r\n\r\n2.4 Comments\r\nPOST /posts/{id}/comments \u2013 add comment (body), authenticated\r\n\r\nGET /posts/{id}/comments \u2013 list comments with author & timestamps\r\n\r\nDELETE /comments/{id} \u2013 comment owner or admin\r\n\r\n2.5 Tags\r\nGET /tags/ \u2013 list all tags with usage counts\r\n\r\nGET /tags/{tag}/posts \u2013 list posts using a specific tag\r\n\r\n3. Data Models (Pydantic-style)\r\nyaml\r\nCopy\r\nEdit\r\nUser:\r\n  id: uuid\r\n  username: str (min 3, max 20)\r\n  email: str (valid email)\r\n  password_hash: str\r\n  bio: Optional[str]\r\n  created_at: datetime\r\n\r\nPost:\r\n  id: uuid\r\n  title: str (max 200)\r\n  body: str\r\n  author_id: uuid\r\n  tags: List[str]\r\n  created_at: datetime\r\n  updated_at: datetime\r\n\r\nComment:\r\n  id: uuid\r\n  post_id: uuid\r\n  author_id: uuid\r\n  body: str (max 1000)\r\n  created_at: datetime\r\n4. Functional Requirements\r\nUsers can register, login, and manage own profiles.\r\n\r\nLogged-in users can create, read, update, and delete their own posts.\r\n\r\nAnyone can list and read posts; only logged-in users can comment.\r\n\r\nEach post page displays all comments.\r\n\r\nTagging system supports filtering posts by tag.\r\n\r\nAdmins can delete any post or comment, or ban users.\r\n\r\n5. Validation Rules\r\nUsername: 3\u201320 alphanumeric characters\r\n\r\nPassword: minimum 8 characters, at least one number and one letter\r\n\r\nEmail: valid format and unique\r\n\r\nTitle: non-empty, max 200 characters\r\n\r\nComment body: non-empty, max 1000 characters\r\n\r\n6. Authentication & Authorization\r\nUse JWT in Authorization: Bearer <token> header\r\n\r\nRoles:\r\n\r\nUser: can manage own data\r\n\r\nAdmin: full privileges\r\n\r\n7. Error Handling\r\nStandard HTTP status codes (400, 401, 403, 404, 409, 500)\r\n\r\nJSON error format:\r\n\r\njson\r\nCopy\r\nEdit\r\n{\r\n  \"error\": \"ValidationError\",\r\n  \"message\": \"Title cannot be empty\",\r\n  \"details\": { \"title\": \"required\" }\r\n}\r\n8. Non-Functional Requirements\r\nPerformance: 95% of requests < 200\u202fms under 1000 concurrent users\r\n\r\nAvailability: \u2265 99.9% uptime\r\n\r\nSecurity: HTTPS required; password hashing (bcrypt)\r\n\r\nLogging: Log every request with timestamp, user ID, endpoint, and status", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3119, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}}}