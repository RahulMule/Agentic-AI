System-Level Requirements:
- Performance: 95% of requests < 200ms under 1000 concurrent users
- Availability: ≥ 99.9% uptime
- Security: HTTPS required; password hashing using bcrypt
- Logging: Log every request with timestamp, user ID, endpoint, and status

Functional Requirements:
- Users can register, login, and manage own profiles.
- Logged-in users can create, read, update, and delete their own posts.
- Anyone can list and read posts; only logged-in users can comment.
- Each post page displays all comments.
- Tagging system supports filtering posts by tag.
- Admins can delete any post or comment, or ban users.

Entities:
- User
- Post
- Comment
- Tag

Data Models:
1. User Model:
   - id: uuid
   - username: str (min 3, max 20)
   - email: str (valid email)
   - password_hash: str
   - bio: Optional[str]
   - created_at: datetime

2. Post Model:
   - id: uuid
   - title: str (max 200)
   - body: str
   - author_id: uuid
   - tags: List[str]
   - created_at: datetime
   - updated_at: datetime

3. Comment Model:
   - id: uuid
   - post_id: uuid
   - author_id: uuid
   - body: str (max 1000)
   - created_at: datetime

Roles and Permissions:
- Public Visitor: Can list and read posts but cannot create, update, or delete posts or comments.
- Registered User: Can manage their own data (create, read, update, and delete their own posts), create comments on posts, and browse other users' profiles with limited information.
- Admin: Has full privileges, including the ability to delete any post or comment, ban users, and access any user profile with detailed information.

REST Endpoints:
1. Authentication
   - POST /auth/register: Register user
   - POST /auth/login: Login user

2. Users
   - GET /users/{id}: Retrieve user information
   - PUT /users/{id}: Update profile (requires JWT, only by same user)
   - DELETE /users/{id}: Delete user (requires Admin)

3. Posts
   - POST /posts/: Create a post
   - GET /posts/: List all posts
   - GET /posts/{id}: Retrieve a specific post and comments
   - PUT /posts/{id}: Edit a post (author only)
   - DELETE /posts/{id}: Delete a post (author or admin)

4. Comments
   - POST /posts/{id}/comments: Add comment to a specific post
   - GET /posts/{id}/comments: List comments for a specific post
   - DELETE /comments/{id}: Delete a comment (comment owner or admin)

5. Tags
   - GET /tags/: List all tags and their usage counts
   - GET /tags/{tag}/posts: List posts with a specific tag

Validations and Constraints:
1. Username: Alphanumeric characters with a minimum of 3 and a maximum of 20 characters.
2. Password: Minimum of 8 characters, at least one number and one letter.
3. Email: Valid email format and must be unique.
4. Title: Non-empty with a maximum of 200 characters.
5. Comment body: Non-empty with a maximum of 1000 characters.

Non-Functional Requirements:
- Performance: 95% of requests < 200ms under 1000 concurrent users
- Availability: ≥ 99.9% uptime
- Security: HTTPS required; password hashing using bcrypt
- Logging: Log every request with timestamp, user ID, endpoint, and statusSystem-Level Requirements:
- Performance: 95% of requests should be less than 200ms under 1000 concurrent users
- Availability: Greater than or equal to 99.9% uptime
- Security: HTTPS required and password hashing using bcrypt
- Logging: Every request should be logged with timestamp, user ID, endpoint, and status

Functional Requirements:
- Users can register, login, and manage their own profiles.
- Logged-in users can create, read, update, and delete their own posts.
- Anyone can list and read posts; only logged-in users can comment.
- Each post page displays all comments.
- Tagging system supports filtering posts by tag.
- Admins can delete any post or comment, or ban users.

Entities:
- User
- Post
- Comment
- Tag
- Public Visitor
- Registered User
- Admin

Data Models:
1. User:
   - id (uuid)
   - username (3-20 alphanumeric characters)
   - email (valid format and unique)
   - password_hash (encrypted password)
   - bio (optional)
   - created_at (datetime)
2. Post:
   - id (uuid)
   - title (max 200 characters)
   - body (content of the post)
   - author_id (uuid, linking to User with the specific ID)
   - tags (list of strings)
   - created_at (datetime)
   - updated_at (datetime)
3. Comment:
   - id (uuid)
   - post_id (uuid, linking to Post with the specific ID)
   - author_id (uuid, linking to User with the specific ID)
   - body (content of the comment)
   - created_at (datetime)

Roles and Permissions:
- User: A registered user can register, login, and manage their own profiles. They can create, read, update, and delete their own posts. Only logged-in users can comment on posts.
- Admin: An admin has full privileges over the platform. They can delete any post or comment, or ban users.

REST Endpoints:
1. Authentication:
   - POST /auth/register
   - POST /auth/login
2. Users:
   - GET /users/{id}
   - PUT /users/{id}
   - DELETE /users/{id}
3. Posts:
   - POST /posts/
   - GET /posts/
   - GET /posts/{id}
   - PUT /posts/{id}
   - DELETE /posts/{id}
4. Comments:
   - POST /posts/{id}/comments
   - GET /posts/{id}/comments
   - DELETE /comments/{id}
5. Tags:
   - GET /tags/
   - GET /tags/{tag}/posts

Validations and Constraints:
- Username: Must be between 3-20 alphanumeric characters
- Password: Minimum of 8 characters, must contain at least one number and one letter
- Email: Valid email format and unique
- Title: Non-empty, maximum of 200 characters
- Comment body: Non-empty, maximum of 1000 characters

Non-Functional Requirements:
- Performance: 95% of requests should be less than 200ms under 1000 concurrent users
- Availability: Greater than or equal to 99.9% uptime
- Security: HTTPS required and password hashing using bcrypt
- Logging: Every request should be logged with timestamp, user ID, endpoint, and status