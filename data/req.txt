System-level requirements:
1. Performance: 95% of requests should be handled within 200 milliseconds under 1000 concurrent users.
2. Availability: The system should maintain a minimum uptime of 99.9%.
3. Security: The system should use HTTPS and bcrypt for password hashing.
4. Logging: Every request, along with its timestamp, user ID, endpoint, and status, should be logged.

Entities described in the system:
1. Public Visitor
2. Registered User
3. Admin
4. User (data model)
5. Post
6. Comment
7. Tag

Data models:
1. User:
id: uuid
username: str (min 3, max 20)
email: str (valid email)
password_hash: str
bio: Optional[str]
created_at: datetime

2. Post:
id: uuid
title: str (max 200)
body: str
author_id: uuid
tags: List[str]
created_at: datetime
updated_at: datetime

3. Comment:
id: uuid
post_id: uuid
author_id: uuid
body: str (max 1000)
created_at: datetime

Roles and permissions:
1. Public Visitor: This role can view posts and comments but does not have permission to register, write posts, or comment.
2. Registered User: This role can perform the following actions: register, login, view posts and comments, and comment on posts. They can also create, read, update, and delete their own posts.
3. Admin: This role has full privileges, including deleting any post or comment, banning users, and accessing data managed by other users.

REST endpoints:
1. Authentication:
   - POST /auth/register
   - POST /auth/login

2. Users:
   - GET /users/{id}
   - PUT /users/{id}
   - DELETE /users/{id}

3. Posts:
   - POST /posts/
   - GET /posts/
   - GET /posts/{id}
   - PUT /posts/{id}
   - DELETE /posts/{id}

4. Comments:
   - POST /posts/{id}/comments
   - GET /posts/{id}/comments
   - DELETE /comments/{id}

5. Tags:
   - GET /tags/
   - GET /tags/{tag}/posts

Validations and constraints:
1. Username: 3-20 alphanumeric characters
2. Password: minimum 8 characters, at least one number and one letter
3. Email: valid format and unique
4. Title (for posts): non-empty, max 200 characters
5. Comment body: non-empty, max 1000 characters

Non-functional requirements:
1. Performance (95% of requests < 200ms under 1000 concurrent users)
2. Availability (â‰¥ 99.9% uptime)
3. Security (HTTPS required; password hashing using bcrypt)
4. Logging (Log every request with timestamp, user ID, endpoint, and status)